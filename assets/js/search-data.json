{
  
    
        "post0": {
            "title": "Petite Pandas Data Analysis using Pandas and NumPy",
            "content": "Predictive Analysis . Predictive analysis is the use of _, data mining, and machine learning techniques to analyze current and historical data in order to make predictions about future events or behaviors. It involves identifying __ and trends in data, and then using that information to forecast what is likely to happen in the future. . Predictive analysis is used in a wide range of applications, from forecasting sales and demand, to predicting customer behavior, to detecting fraudulent transactions. It involves collecting and analyzing data from a variety of sources, including historical data, customer data, financial data, and social media data, among others. . The process of predictive analysis typically involves the following steps: . Defining the problem and identifying the relevant data sources | . | Exploring and analyzing the data to identify patterns and trends | Selecting an appropriate model or algorithm to use for predictions | Training and validating the model using historical data | . | Monitoring and evaluating the performance of the model over time | Predictive analysis can help organizations make more informed decisions, improve efficiency, and gain a competitive advantage by leveraging insights from data. . It is most commonly used in __, where workers try to predict which products would be most popular and try to advertise those products as much as possible, and also ___, where algorithms analyze patterns and reveal prerequisites for diseases and suggest preventive treatment, predict the results of various treatments and choose the best option for each patient individually, and predict disease outbreaks and epidemics. . 1. Intro to NumPy and the features it consists . Numpy, by definition, is the fundamental package for __ in Python which can be used to perform __, provide __, and makes __ much __. Numpy is very important and useful when it comes to data analysis, as it can easily use its features to complete and perform any mathematical operation, as well as analyze data files. . If you don&#39;t already have numpy installed, you can do so using conda install numpy or pip install numpy . Once that is complete, to import numpy in your code, all you must do is: . import numpy as np . 2. Using NumPy to create arrays . An array is the central __ of the NumPy library. They are used as __ which are able to store more than one item at the same time. Using the function np.array is used to create an array, in which you can create multidimensional arrays. . Shown below is how to create a 1D array: . a = np.array([1, 2, 3]) print(a) # this creates a 1D array . How could you create a 3D array based on knowing how to make a 1D array? . . Arrays can be printed in different ways, especially a more readable format. As we have seen, arrays are printed in rows and columns, but we can change that by using the reshape function . c = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) print(c.reshape(1, 9)) # organizes it all in a single line of output . In the code segment below, we can also specially select certain rows and columns from the array to further analyze selective data. . print(c[1:, :2]) # the 1: means &quot;start at row 1 and select all the remaining rows&quot; # the :2 means &quot;select the first two columns&quot; . 3. Basic array operations . One of the most basic operations that can be performed on arrays is ___. With numpy, it is very easy to perform arithmetic operations on arrays. You can __, _, __ and __ arrays, just like you would with regular numbers. When performing these operations, numpy applies the operation element-wise, meaning that it performs the operation on each element in the array separately. This makes it easy to perform operations on large amounts of data quickly and efficiently. . a = np.array([1, 2, 3]) b = np.array([4, 5, 6]) print(a + b) # adds each value based on the column the integer is in print(a - b) # subtracts each value based on the column the integer is in print(a * b) # multiplies each value based on the column the integer is in print(a / b) # divides each value based on the column the integer is in . d = np.exp(b) e = np.sqrt(b) print(d) print(e) . From the knowledge of how to use more advanced mathematical expressions than the basic 4 mathematical operations such as exponent and square root, now can you code how to calculate the 3 main trig expressions (sin, cos, tan), natural log, and log10 of a 1D array. . # calculate cos # calculate tan # calculate natural log # calculate log10 . 4. Data analysis using numpy . Numpy provides a convenient and powerful way to perform data analysis tasks on __. One of the most common tasks in data analysis is finding the __, __, and __ of a dataset. Numpy provides functions to perform these operations quickly and easily. The mean function calculates the average value of the data, while the median function calculates the middle value in the data. The standard deviation function calculates how spread out the data is from the mean. Additionally, numpy provides functions to find the minimum and maximum values in the data. These functions are very useful for gaining insight into the properties of large datasets and can be used for a wide range of data analysis tasks. . data = np.array([2, 5, 12, 13, 19]) print(np.mean(data)) # finds the mean of the dataset print(np.median(data)) # finds the median of the dataset print(np.std(data)) # finds the standard deviation of the dataset print(np.min(data)) # finds the min of the dataset print(np.max(data)) # finds the max of the dataset . Now from learning this, can you find a different way from how we can solve the sum or products of a dataset other than how we learned before? . . Numpy also has the ability to handle CSV files, which are commonly used to store and exchange large datasets. By importing CSV files into numpy arrays, we can easily perform complex operations and analysis on the data, making numpy an essential tool for data scientists and researchers. . genfromtxt and loadtxt are two functions in the numpy library that can be used to read data from text files, including CSV files. . genfromtxt is a more advanced function that can be used to read text files that have more complex structures, including CSV files. genfromtxt can handle files that have missing or invalid data, or files that have columns of different data types. It can also be used to skip header lines or to read only specific columns from the file. . import numpy as np padres = np.genfromtxt(&#39;files/padres.csv&#39;, delimiter=&#39;,&#39;, dtype=str, encoding=&#39;utf-8&#39;) # delimiter indicates that the data is separated into columns which is distinguished by commas # genfromtxt is used to read the csv file itself # dtype is used to have numpy automatically detect the data type in the csv file print(padres) . loadtxt is a simpler function that can be used to read simple text files that have a regular structure, such as files that have only one type of data (such as all integers or all floats). loadtxt can be faster than genfromtxt because it assumes that the data in the file is well-structured and can be easily parsed. . import numpy as np padres = np.loadtxt(&#39;files/padres.csv&#39;, delimiter=&#39;,&#39;, dtype=str, encoding=&#39;utf-8&#39;) print(padres) . for i in padres: print(&quot;,&quot;.join(i)) . Pandas . What is Pandas . Pandas is a Python library used for working with data sets. A python library is something It has functions for analyzing, cleaning, exploring, and manipulating data. . Why Use Pandas? . Pandas allows us to analyze big data and make conclusions based on statistical theories. Pandas can clean messy data sets, and make them readable and relevant. Also it is a part of data analysis, and data manipulation. . What Can Pandas Do? . Pandas gives you answers about the data. Like: . Is there a correlation between two or more columns? | What is average value | Max value | Min value | How to load data | Delete data | Sort Data. | . Pandas are also able to delete rows that are not relevant, or contains wrong values, like empty or NULL values. This is called cleaning the data. . Basics of Pandas. . import pandas as pd # What this does is it calls the python pandas library and this code segment is needed whenever incorporating pandas. . DICTIONARIES AND DATASETS . One way you are able to manipulate a pandas data set is by creating a dictionary and calling it as seen with the dict data 1 and pd.dataframe which is a way to print the set. | . import pandas as pd data1 = { &#39;teams&#39;: [&quot;BARCA&quot;, &quot;REAL&quot;, &quot;ATLETICO&quot;], &#39;standings&#39;: [1, 2, 3] } myvar = pd.DataFrame(data1) print(myvar) . Indexing and manipulaton of data through lists. . With pandas you can also organize the data which is one of its biggest perks, we call this indexing, this is when we define the first column in a data frame. | . import pandas as pd score = [5/5, 5/5, 1/5] myvar = pd.Series(score, index = [&quot;math&quot;, &quot;science&quot;, &quot;pe&quot;]) print(myvar) . Pandas Classes . Within pandas the library consits of a lot of functions which allow you to manipulate datasets in lists dictionsaries and csv files here are some of the ones we are going to cover (hint: take notes on these) . Series | Index | PeriodIndex | DataframeGroupedBy | Categorical | Time Stamp | . PeriodIndex . This allows for a way to repeat data over time that it occurs as seen from january 2022 to december 2023. You can use Y for years, M for months, and D for days. | . import pandas as pd time = pd.period_range(&#39;2022-01&#39;, &#39;2022-12&#39;, freq=&#39;M&#39;) print(time) . Now implement a way to show a period index from June 2022 to July 2023 in days. . . Dataframe Grouped By . This allows for you to organize your data and calculate the different functions such as | count(): returns the number of non-null values in each group. | sum(): returns the sum of values in each group. | mean(): returns the mean of values in each group. | min(): returns the minimum value in each group. | max(): returns the maximum value in each group. | median(): returns the median of values in each group. | var(): returns the variance of values in each group. | agg(): applies one or more functions to each group and returns a new DataFrame with the results. | . import pandas as pd data = { &#39;Category&#39;: [&#39;E&#39;, &#39;F&#39;, &#39;E&#39;, &#39;F&#39;, &#39;E&#39;, &#39;F&#39;, &#39;E&#39;, &#39;F&#39;], &#39;Value&#39;: [100, 250, 156, 255, 240, 303, 253, 3014] } df = pd.DataFrame(data) grouped = df.groupby(&#39;Category&#39;).#GUESS WHAT THIS WOULD BE IF WE WERE LOOKING FOR COMBINED TOTALS!() print(grouped) . Categorical . This sets up a category for something and puts it within the categories and allows for better orginzation | . import pandas as pd colors = pd.Categorical([&#39;yellow&#39;, &#39;orange&#39;, &#39;blue&#39;, &#39;yellow&#39;, &#39;orange&#39;], categories=[&#39;yellow&#39;, &#39;orange&#39;, &#39;blue&#39;]) print(colors) . Timestamp Class . This allows to display a single time which can be useful when working with datasets that deal with time allowing you to manipulate the time you do something and how you do it. | . import pandas as pd timing = pd.Timestamp(&#39;2023-02-05 02:00:00&#39;) print(#WHAT WOULD THIS BE) . CSV FILES! . A csv file contains data and within pandas you are able to call the function and you are able to manipulate the data with the certain data classes talked about above. | . Name, Position, Average, HR, RBI, OPS, JerseyNumber | Manny Machado, 3B, .298, 32, 102, .897, 13 | Tatis Jr, RF, .281, 42, 97, .975, 23 | Juan Soto, LF, .242, 27, 62, .853, 22 | Xanger Bogaerts, SS, .307, 15, 73, .833, 2 | Nelson Cruz, DH, .234, 10, 64, .651, 32 | Matt Carpenter, DH, .305, 15, 37, 1.138, 14 | Cronezone, 1B, .239, 17, 88, .722, 9 | Ha-Seong Kim, 2B, .251, 11, 59, .708, 7 | Trent Grisham, CF, .184, 17, 53, .626, 1 | Luis Campusano, C, .250, 1, 5, .593, 12 | Austin Nola, C, .251, 4, 40, .649, 26 | Jose Azocar, OF, .257, 0, 10, .630, 28 | . QUESTION: WHAT DO YOU GUYS THINK THE INDEX FOR THIS WOULD BE? . Can you explain what is going on in this code segment below. (hint: define what ascending= false means, and df. head means) . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/padres.csv&#39;).sort_values(by=[&#39;Name&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) print(&#39;, &#39;.join(df.tail(10))) . import pandas as pd df = pd.read_csv(&quot;./files/housing.csv&quot;) mode_total_rooms = df[&#39;total_rooms&#39;].mode() print(f&quot;The mode of the &#39;total_rooms&#39; column is: {mode_total_rooms}&quot;) . import pandas as pd df = pd.read_csv(&quot;./files/housing.csv&quot;) grouped_df = df.groupby(&#39;total_rooms&#39;) agg_df = grouped_df.agg({&#39;total_rooms&#39;: &#39;sum&#39;, &#39;population&#39;: &#39;mean&#39;, &#39;longitude&#39;: &#39;count&#39;}) # WHAT DO YOU GUYS THINK df.agg means in context of pandas and what does it stand for. print(agg_df) . Our Frontend Data Analysis Project . Link . Popcorn Hacks . Complete fill in the blanks for Predictive Analysis Numpy | Takes notes on Panda where it asks you to | Complete code segment tasks in Panda and Numpy | . Main Hack . Make a data file - content is up to you, just make sure there are integer values - and print | Run Panda and Numpy commands Panda: Find Min and Max values | Sort in order - can be order of least to greatest or vice versa | Create a smaller dataframe and merge it with your data file | . | Numpy: Random number generation | create a multi-dimensional array (multiple elements) | create an array with linearly spaced intervals between values | . | . | . Grading . The grading will be binary - all or nothing; no partial credit . 0.3 for all the popcorn hacks | 0.6 for the main hack - CSV file | 0.1 for going above and beyond in the main hack | .",
            "url": "https://paravsalaniwal.github.io/T3Project/2023/04/25/Data-Analysis-Panda-Numpy.html",
            "relUrl": "/2023/04/25/Data-Analysis-Panda-Numpy.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "P5-Y 4/25 Data Analysis with Numpy & Pandas",
            "content": "WGET links . CSV File (add to /_notebooks/files/) | Second CSV File (add to /_notebooks/files/) | Data Analysis Lesson + Hacks | . Predictive Analysis . Predictive analysis is the use of statistical, data mining, and machine learning techniques to analyze current and historical data in order to make predictions about future events or behaviors. It involves identifying patterns and trends in data, and then using that information to forecast what is likely to happen in the future. . Predictive analysis is used in a wide range of applications, from forecasting sales and demand, to predicting customer behavior, to detecting fraudulent transactions. It involves collecting and analyzing data from a variety of sources, including historical data, customer data, financial data, and social media data, among others. . The process of predictive analysis typically involves the following steps: . Defining the problem and identifying the relevant data sources | Collecting and cleaning the data | Exploring and analyzing the data to identify patterns and trends | Selecting an appropriate model or algorithm to use for predictions | Training and validating the model using historical data | Using the model to make predictions on new data | Monitoring and evaluating the performance of the model over time | Predictive analysis can help organizations make more informed decisions, improve efficiency, and gain a competitive advantage by leveraging insights from data. . It is most commonly used in Retail, where workers try to predict which products would be most popular and try to advertise those products as much as possible, and also Healthcare, where algorithms analyze patterns and reveal prerequisites for diseases and suggest preventive treatment, predict the results of various treatments and choose the best option for each patient individually, and predict disease outbreaks and epidemics. . 1. Intro to NumPy and the features it consists . Numpy, by definition, is the fundamental package for scientific computing in Python which can be used to perform mathematical operations, providing multidimensional array objects, and makes data analysis much easier. Numpy is very important and useful when it comes to data analysis, as it can easily use its features to complete and perform any mathematical operation, as well as analyze data files. . If you don&#39;t already have numpy installed, you can do so using conda install numpy or pip install numpy . Once that is complete, to import numpy in your code, all you must do is: . import numpy as np . 2. Using NumPy to create arrays . An array is the central data structure of the NumPy library. They are used as containers which are able to store more than one item at the same time. Using the function np.array is used to create an array, in which you can create multidimensional arrays. . Shown below is how to create a 1D array: . a = np.array([1, 2, 3]) print(a) # this creates a 1D array . How could you create a 3D array based on knowing how to make a 1D array? . . Arrays can be printed in different ways, especially a more readable format. As we have seen, arrays are printed in rows and columns, but we can change that by using the reshape function . c = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) print(c.reshape(1, 9)) # organizes it all in a single line of output . In the code segment below, we can also specially select certain rows and columns from the array to further analyze selective data. . print(c[1:, :2]) # the 1: means &quot;start at row 1 and select all the remaining rows&quot; # the :2 means &quot;select the first two columns&quot; . 3. Basic array operations . One of the most basic operations that can be performed on arrays is arithmetic operations. With numpy, it is very easy to perform arithmetic operations on arrays. You can add, subtract, multiply and divide arrays, just like you would with regular numbers. When performing these operations, numpy applies the operation element-wise, meaning that it performs the operation on each element in the array separately. This makes it easy to perform operations on large amounts of data quickly and efficiently. . a = np.array([1, 2, 3]) b = np.array([4, 5, 6]) print(a + b) # adds each value based on the column the integer is in print(a - b) # subtracts each value based on the column the integer is in print(a * b) # multiplies each value based on the column the integer is in print(a / b) # divides each value based on the column the integer is in . d = np.exp(b) e = np.sqrt(b) print(d) print(e) . From the knowledge of how to use more advanced mathematical expressions than the basic 4 mathematical operations such as exponent and square root, now can you code how to calculate the 3 main trig expressions (sin, cos, tan), natural log, and log10 of a 1D array. . # calculate cos # calculate tan # calculate natural log # calculate log10 . 4. Data analysis using numpy . Numpy provides a convenient and powerful way to perform data analysis tasks on large datasets. One of the most common tasks in data analysis is finding the mean, median, and standard deviation of a dataset. Numpy provides functions to perform these operations quickly and easily. The mean function calculates the average value of the data, while the median function calculates the middle value in the data. The standard deviation function calculates how spread out the data is from the mean. Additionally, numpy provides functions to find the minimum and maximum values in the data. These functions are very useful for gaining insight into the properties of large datasets and can be used for a wide range of data analysis tasks. . data = np.array([2, 5, 12, 13, 19]) print(np.mean(data)) # finds the mean of the dataset print(np.median(data)) # finds the median of the dataset print(np.std(data)) # finds the standard deviation of the dataset print(np.min(data)) # finds the min of the dataset print(np.max(data)) # finds the max of the dataset . Now from learning this, can you find a different way from how we can solve the sum or products of a dataset other than how we learned before? . . Numpy also has the ability to handle CSV files, which are commonly used to store and exchange large datasets. By importing CSV files into numpy arrays, we can easily perform complex operations and analysis on the data, making numpy an essential tool for data scientists and researchers. . genfromtxt and loadtxt are two functions in the numpy library that can be used to read data from text files, including CSV files. . genfromtxt is a more advanced function that can be used to read text files that have more complex structures, including CSV files. genfromtxt can handle files that have missing or invalid data, or files that have columns of different data types. It can also be used to skip header lines or to read only specific columns from the file. . import numpy as np padres = np.genfromtxt(&#39;files/padres.csv&#39;, delimiter=&#39;,&#39;, dtype=str, encoding=&#39;utf-8&#39;) # delimiter indicates that the data is separated into columns which is distinguished by commas # genfromtxt is used to read the csv file itself # dtype is used to have numpy automatically detect the data type in the csv file print(padres) . loadtxt is a simpler function that can be used to read simple text files that have a regular structure, such as files that have only one type of data (such as all integers or all floats). loadtxt can be faster than genfromtxt because it assumes that the data in the file is well-structured and can be easily parsed. . import numpy as np padres = np.loadtxt(&#39;files/padres.csv&#39;, delimiter=&#39;,&#39;, dtype=str, encoding=&#39;utf-8&#39;) print(padres) . for i in padres: print(&quot;,&quot;.join(i)) . Pandas . What is Pandas . Pandas is a Python library used for working with data sets. A python library is something It has functions for analyzing, cleaning, exploring, and manipulating data. . Why Use Pandas? . Pandas allows us to analyze big data and make conclusions based on statistical theories. Pandas can clean messy data sets, and make them readable and relevant. Also it is a part of data analysis, and data manipulation. . What Can Pandas Do? . Pandas gives you answers about the data. Like: . Is there a correlation between two or more columns? | What is average value | Max value | Min value | How to load data | Delete data | Sort Data. | . Pandas are also able to delete rows that are not relevant, or contains wrong values, like empty or NULL values. This is called cleaning the data. . Basics of Pandas. . import pandas as pd # What this does is it calls the python pandas library and this code segment is needed whenever incorporating pandas. . DICTIONARIES AND DATASETS . One way you are able to manipulate a pandas data set is by creating a dictionary and calling it as seen with the dict data 1 and pd.dataframe which is a way to print the set. | . import pandas as pd data1 = { &#39;teams&#39;: [&quot;BARCA&quot;, &quot;REAL&quot;, &quot;ATLETICO&quot;], &#39;standings&#39;: [1, 2, 3] } myvar = pd.DataFrame(data1) print(myvar) . Indexing and manipulaton of data through lists. . With pandas you can also organize the data which is one of its biggest perks, we call this indexing, this is when we define the first column in a data frame. | . import pandas as pd score = [5/5, 5/5, 1/5] myvar = pd.Series(score, index = [&quot;math&quot;, &quot;science&quot;, &quot;pe&quot;]) print(myvar) . Pandas Classes . Within pandas the library consits of a lot of functions which allow you to manipulate datasets in lists dictionsaries and csv files here are some of the ones we are going to cover (hint: take notes on these) . Series | Index | PeriodIndex | DataframeGroupedBy | Categorical | Time Stamp | . PeriodIndex . This allows for a way to repeat data over time that it occurs as seen from january 2022 to december 2023. You can use Y for years, M for months, and D for days. | . import pandas as pd time = pd.period_range(&#39;2022-01&#39;, &#39;2022-12&#39;, freq=&#39;M&#39;) print(time) . Now implement a way to show a period index from June 2022 to July 2023 in days. . . Dataframe Grouped By . This allows for you to organize your data and calculate the different functions such as | count(): returns the number of non-null values in each group. | sum(): returns the sum of values in each group. | mean(): returns the mean of values in each group. | min(): returns the minimum value in each group. | max(): returns the maximum value in each group. | median(): returns the median of values in each group. | var(): returns the variance of values in each group. | agg(): applies one or more functions to each group and returns a new DataFrame with the results. | . import pandas as pd data = { &#39;Category&#39;: [&#39;E&#39;, &#39;F&#39;, &#39;E&#39;, &#39;F&#39;, &#39;E&#39;, &#39;F&#39;, &#39;E&#39;, &#39;F&#39;], &#39;Value&#39;: [100, 250, 156, 255, 240, 303, 253, 3014] } df = pd.DataFrame(data) grouped = df.groupby(&#39;Category&#39;).#GUESS WHAT THIS WOULD BE IF WE WERE LOOKING FOR COMBINED TOTALS!() print(grouped) . Categorical . This sets up a category for something and puts it within the categories and allows for better orginzation | . import pandas as pd colors = pd.Categorical([&#39;yellow&#39;, &#39;orange&#39;, &#39;blue&#39;, &#39;yellow&#39;, &#39;orange&#39;], categories=[&#39;yellow&#39;, &#39;orange&#39;, &#39;blue&#39;]) print(colors) . Timestamp Class . This allows to display a single time which can be useful when working with datasets that deal with time allowing you to manipulate the time you do something and how you do it. | . import pandas as pd timing = pd.Timestamp(&#39;2023-02-05 02:00:00&#39;) print(#WHAT WOULD THIS BE) . CSV FILES! . A csv file contains data and within pandas you are able to call the function and you are able to manipulate the data with the certain data classes talked about above. | . Name, Position, Average, HR, RBI, OPS, JerseyNumber | Manny Machado, 3B, .298, 32, 102, .897, 13 | Tatis Jr, RF, .281, 42, 97, .975, 23 | Juan Soto, LF, .242, 27, 62, .853, 22 | Xanger Bogaerts, SS, .307, 15, 73, .833, 2 | Nelson Cruz, DH, .234, 10, 64, .651, 32 | Matt Carpenter, DH, .305, 15, 37, 1.138, 14 | Cronezone, 1B, .239, 17, 88, .722, 9 | Ha-Seong Kim, 2B, .251, 11, 59, .708, 7 | Trent Grisham, CF, .184, 17, 53, .626, 1 | Luis Campusano, C, .250, 1, 5, .593, 12 | Austin Nola, C, .251, 4, 40, .649, 26 | Jose Azocar, OF, .257, 0, 10, .630, 28 | . QUESTION: WHAT DO YOU GUYS THINK THE INDEX FOR THIS WOULD BE? . Can you explain what is going on in this code segment below. (hint: define what ascending= false means, and df. head means) . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/padres.csv&#39;).sort_values(by=[&#39;Name&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) print(&#39;, &#39;.join(df.tail(10))) . import pandas as pd df = pd.read_csv(&quot;./files/housing.csv&quot;) mode_total_rooms = df[&#39;total_rooms&#39;].mode() print(f&quot;The mode of the &#39;total_rooms&#39; column is: {mode_total_rooms}&quot;) . import pandas as pd df = pd.read_csv(&quot;./files/housing.csv&quot;) grouped_df = df.groupby(&#39;total_rooms&#39;) agg_df = grouped_df.agg({&#39;total_rooms&#39;: &#39;sum&#39;, &#39;population&#39;: &#39;mean&#39;, &#39;longitude&#39;: &#39;count&#39;}) # WHAT DO YOU GUYS THINK df.agg means in context of pandas and what does it stand for. print(agg_df) . Project . Link . Popcorn Hacks . Complete fill in the blanks for Predictive Analysis and Numpy lessons | Takes notes on Panda lesson where it asks you to | Complete code segment tasks in Panda and Numpy lessons | Answer the questions in Panda lesson | . Main Hack . Make a data file - content is up to you, just make sure there are integer values - and print | Run Panda and Numpy commands Panda: Find Min and Max values | Sort in order - can be order of least to greatest or vice versa | Create a smaller dataframe and merge it with your data file | . | Numpy: Random number generation | create a multi-dimensional array (multiple elements) | create an array with linearly spaced intervals between values | . | . | . Grading . The grading will be binary - all or nothing; no partial credit . 0.3 for all the popcorn hacks | 0.6 for the main hack - CSV file | 0.1 for going above and beyond in the main hack | .",
            "url": "https://paravsalaniwal.github.io/T3Project/student/2023/04/25/Combined-Lesson-Plan.html",
            "relUrl": "/student/2023/04/25/Combined-Lesson-Plan.html",
            "date": " • Apr 25, 2023"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Project",
          "content": ". Pick a Team All Players Atlanta Hawks Boston Celtics Brooklyn Nets Charlotte Hornets Chicago Bulls Cleveland Cavaliers Dallas Mavericks Denver Nuggets Detroit Pistons Golden State Warriors Houston Rockets Indiana Pacers Los Angeles Clippers Los Angeles Lakers Memphis Grizzlies Miami Heat Milwaukee Bucks Minnesota Timberwolves New Orleans Pelicans New York Knicks Oklahoma City Thunder Orlando Magic Philadelphia 76ers Phoenix Suns Portland Trail Blazers Sacramento Kings San Antonio Spurs Toronto Raptors Utah Jazz Washington Wizards Pick a Stat - Bar Graph Points Assists Rebounds Steals Blocks Field Goal % 3 Point % Pick a Stat - Pie Graph Points Assists Rebounds Steals Blocks Field Goal % 3 Point % .",
          "url": "https://paravsalaniwal.github.io/T3Project/Project/",
          "relUrl": "/Project/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Data Analysis Project",
          "content": "Click the table headers to sort the entries in descending order. Click the table headers again to reverse the order. . Team Name Year Founded Championships Won . Atlanta Hawks | 1949 | 01 | . Boston Celtics | 1946 | 17 | . Brooklyn Nets | 1976 | 00 | . Charlotte Hornets | 1988 | 00 | . Chicago Bulls | 1966 | 06 | . Cleveland Cavaliers | 1970 | 01 | . Dallas Mavericks | 1980 | 01 | . Denver Nuggets | 1976 | 00 | . Detroit Pistons | 1948 | 03 | . Golden State Warriors | 1946 | 07 | . Houston Rockets | 1967 | 02 | . Indiana Pacers | 1976 | 00 | . Los Angeles Clippers | 1970 | 00 | . Los Angeles Lakers | 1948 | 17 | . Memphis Grizzlies | 1995 | 00 | . Miami Heat | 1988 | 03 | . Milwaukee Bucks | 1968 | 02 | . Minnesota Timberwolves | 1989 | 00 | . New Orleans Pelicans | 2002 | 00 | . New York Knicks | 1946 | 02 | . Oklahoma City Thunder | 1967 | 01 | . Orlando Magic | 1989 | 00 | . Philadelphia 76ers | 1949 | 03 | . Phoenix Suns | 1968 | 00 | . Portland Trail Blazers | 1970 | 01 | . Sacramento Kings | 1948 | 00 | . San Antonio Spurs | 1976 | 05 | . Toronto Raptors | 1995 | 01 | . Utah Jazz | 1974 | 00 | . Washington Wizards | 1961 | 01 | . .",
          "url": "https://paravsalaniwal.github.io/T3Project/DataAnalysisProject/",
          "relUrl": "/DataAnalysisProject/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Test Frontend",
          "content": "Name Games Played Points Assists Rebounds Steals Blocks Field Goal % 3 Point % .",
          "url": "https://paravsalaniwal.github.io/T3Project/TEST/",
          "relUrl": "/TEST/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Backend Test",
          "content": "Graphs . .",
          "url": "https://paravsalaniwal.github.io/T3Project/_pages/backend.html",
          "relUrl": "/_pages/backend.html",
          "date": ""
      }
      
  

  

  
      ,"page6": {
          "title": "PLEASE WORK!",
          "content": "Document . .",
          "url": "https://paravsalaniwal.github.io/T3Project/okay/",
          "relUrl": "/okay/",
          "date": ""
      }
      
  

  
  

  
  

  
      ,"page9": {
          "title": "Updated Backend Test",
          "content": "Graphs . .",
          "url": "https://paravsalaniwal.github.io/T3Project/_pages/updatedkrishiv.html",
          "relUrl": "/_pages/updatedkrishiv.html",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://paravsalaniwal.github.io/T3Project/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}